/**
 * ZANavi, Zoff Android Navigation system.
 * Copyright (C) 2015 Zoff <zoff@zoff.cc>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */


#define MAX_INDEXSEARCH_TOWNNAME 300


// IN_BUF_SIZE2 is the size of the file read buffer.
// IN_BUF_SIZE2 must be >= 1
//#define IN_BUF_SIZE2 (1024*16)
//x/ int IN_BUF_SIZE2 = sizeof(struct streets_index_data_block) * 1024;
//x/ int t_IN_BUF_SIZE2 = sizeof(struct town_index_data_block) * 1024;
//x/ static uint8 s_inbuf[(sizeof(struct streets_index_data_block) * 1024)];
//x/ static uint8 t_s_inbuf[(sizeof(struct town_index_data_block) * 1024)];
//static uint8 s_inbuf[IN_BUF_SIZE2];

int IN_BUF_SIZE2 = sizeof(struct streets_index_data_block) * 2048;
int t_IN_BUF_SIZE2 = sizeof(struct town_index_data_block) * 2048;
uint8 *s_inbuf;
uint8 *t_s_inbuf;

// OUT_BUF_SIZE2 is the size of the output buffer used during decompression.
// OUT_BUF_SIZE2 must be a power of 2 >= TINFL_LZ_DICT_SIZE(==32768) (because the low-level decompressor
//              not only writes, but reads from the output buffer as it decompresses)
//#define OUT_BUF_SIZE2 (TINFL_LZ_DICT_SIZE)
//#define OUT_BUF_SIZE2 (1024*32)


// -- OLD --
//int OUT_BUF_SIZE2 = sizeof(struct streets_index_data_block) * 1024;
//int t_OUT_BUF_SIZE2 = sizeof(struct town_index_data_block) * 1024;
//static uint8 s_outbuf[(sizeof(struct streets_index_data_block) * 1024)];
//static uint8 t_s_outbuf[(sizeof(struct town_index_data_block) * 1024)];
// -- OLD --
// -- NEW --
//x/ int OUT_BUF_SIZE2 = TINFL_LZ_DICT_SIZE * 32;
//x/ int t_OUT_BUF_SIZE2 = TINFL_LZ_DICT_SIZE * 32;
//x/ static uint8 s_outbuf[(sizeof(struct streets_index_data_block) * 1024 * 32)];
//x/ static uint8 t_s_outbuf[(sizeof(struct town_index_data_block) * 1024 * 32)];
// -- NEW --

// TINFL_LZ_DICT_SIZE = 32768
int OUT_BUF_SIZE2 =   (sizeof(struct streets_index_data_block) * 512);
int t_OUT_BUF_SIZE2 = (sizeof(struct town_index_data_block) * 512);
uint8 *s_outbuf;
uint8 *t_s_outbuf;

//static uint8 s_outbuf[OUT_BUF_SIZE2];

static long long street_index_size = 0; // this is the offset for town index start
// street index starts at "+sizeof(long long)"

#define my_min(a,b) (((a) < (b)) ? (a) : (b))
#define NUMBER_OF_TOWNS_TO_CACHE 1024

static struct town_index_data_block_c *town_lookup_cache = NULL;
static struct town_index_data_block_c *town_lookup_cache_cur = NULL;
static struct town_index_data_block_c *town_lookup_cache_found = NULL;
static int town_lookup_cache_items = 0;
static int town_lookup_cache_cur_item = 0;


// func definition
static int ascii_cmp_local_faster(char *name, char *match, int partial);
static int ascii_cmp_local_faster_DEBUG(char *name, char *match, int partial);
// func definition


static int search_address_housenumber_for_street(char *hn_name_match, char *street_name_match, char *town_string, struct coord *c, int partial, struct jni_object *jni);



void town_index_init_cache()
{
	//dbg(0,"+#+:enter\n");

	int s = sizeof(struct town_index_data_block_c) * NUMBER_OF_TOWNS_TO_CACHE;
	dbg(0, "cache size=%d\n", s);

	town_lookup_cache = g_malloc(s);
	town_lookup_cache_cur = town_lookup_cache;
	town_lookup_cache_found = NULL;
	town_lookup_cache_items = 0;
	town_lookup_cache_cur_item = 0;

	//dbg(0,"+#+:leave\n");
}

void town_index_insert_cache(struct town_index_data_block* t, char* townname_long)
{
	//dbg(0,"+#+:enter\n");

	if (town_lookup_cache_items < NUMBER_OF_TOWNS_TO_CACHE)
	{
		// fill up cache until all slots are filled
		town_lookup_cache_cur->town_id = t->town_id;
		town_lookup_cache_cur->country_id = t->country_id;
		sprintf(town_lookup_cache_cur->town_name, "%s", townname_long);
		town_lookup_cache_items++;
	}
	else
	{
		// just fill cache and rotate if at end
		town_lookup_cache_cur->town_id = t->town_id;
		town_lookup_cache_cur->country_id = t->country_id;
		sprintf(town_lookup_cache_cur->town_name, "%s", townname_long);
	}

	if (town_lookup_cache_items == NUMBER_OF_TOWNS_TO_CACHE)
	{
		town_lookup_cache_cur_item = 0;
		town_lookup_cache_cur = town_lookup_cache;
	}
	else
	{
		town_lookup_cache_cur_item++;
		town_lookup_cache_cur++;
	}
}

int town_index_lookup_cache(long long townid)
{
	//dbg(0,"+#+:enter\n");

	int i;
	struct town_index_data_block_c* t;

	if (town_lookup_cache_items < 1)
	{
		return 0;
	}

	t = town_lookup_cache;
	for (i = 0; i < town_lookup_cache_items; i++)
	{
		if (t->town_id == townid)
		{
			// set pointer to found datablock
			town_lookup_cache_found = t;
			return 1;
		}
		t++;
	}

	return 0;
}

char* town_index_lookup(struct street_index_head *sih, long long townid)
{
	//dbg(0,"+#+:enter\n");

	char *townname = NULL;
	char *townname2 = NULL;
	int found = 0;
	int i;
	int split = 0;
	int split_count = 0;
	long long save_town_id;
	int save_country_id;

	if (townid == 0)
	{
		return townname;
	}

	if (town_lookup_cache == NULL)
	{
		town_index_init_cache();
	}

	if (town_index_lookup_cache(townid) == 1)
	{
		townname = g_strdup_printf("%s", town_lookup_cache_found->town_name);

		// dbg(0, "TWNAME:idx:01:t_id %s\n", town_lookup_cache_found->town_name);

		return townname;
	}

	sih->ti_ib = sih->ti_ib_mem;

	// find townid block
	found = sih->ti_ibs.count_of_index_blocks - 1; // set to last block
	for (i = 0; i < sih->ti_ibs.count_of_index_blocks; i++)
	{
		//dbg(0, "i=%d %lld %lld num idx blocks=%d\n", i, townid, sih->ti_ib->first_id, sih->ti_ibs.count_of_index_blocks);

		if (townid < sih->ti_ib->first_id)
		{
			found = i - 1;
			break;
		}

		sih->ti_ib++;
	}

	if (found != -1)
	{
		//dbg(0, "found town block num=%d\n", found);

		town_index_setpos(sih, found); // move to correct index block

		while (town_index_read_data(sih))
		{
			//dbg(0, "id=%lld\n", sih->ti_db_ptr->town_id);

			if (offline_search_break_searching == 1)
			{
				break;
			}

			if (sih->ti_db_ptr->town_id == townid)
			{
				townname = g_strdup_printf("%s", sih->ti_db_ptr->town_name);
				//dbg(0,"found town:%s\n", townname);
				save_town_id = sih->ti_db_ptr->town_id;
				save_country_id = sih->ti_db_ptr->country_id;
				split = 1;
				split_count = 0;
				while ((town_index_read_data(sih))&&(split == 1))
				{
					split_count++;
					if ((split_count + 1) > MAX_TOWNNAME_SPLIT)
					{
						break;
					}

					if (sih->ti_db_ptr->town_id == 0)
					{
						//dbg(0," town-split:%s\n", sih->ti_db_ptr->town_name);
						townname2 = g_strdup_printf("%s%s", townname, sih->ti_db_ptr->town_name);
						g_free(townname);
						townname = townname2;
					}
					else
					{
						split = 0;
					}
				}
				break;
			}
		}
	}

	if (townname != NULL)
	{
		sih->ti_db_ptr->town_id = save_town_id; // set town and country to values before we read the "split"-blocks!
		sih->ti_db_ptr->country_id = save_country_id;
		town_index_insert_cache(sih->ti_db_ptr, townname);
	}

	//dbg(0, "return\n");

	return townname;
}



struct street_index_head* street_index_init(const char* idxfile_name)
{
	//dbg(0,"+#+:enter\n");

	struct street_index_head *ret=g_new0(struct street_index_head, 1);
	long s1;
	int b;
	char *index_file;

	index_file = g_strdup_printf("%s%s", navit_maps_dir, idxfile_name);
	ret->sif = fopen(index_file, "rb");
	g_free(index_file);

	fread(&street_index_size, sizeof(struct streets_index_index_block_start), 1, ret->sif);
	//dbg(0, "street_index_size=%lld\n", street_index_size);

	b = fread(&ret->si_ibs, sizeof(struct streets_index_index_block_start), 1, ret->sif);
	//dbg(0, "ftell=%d\n", ftell(ret->sif));
	//dbg(0, "items read=%d\n", b);

	//dbg(0, "struct size=%d\n", sizeof(struct streets_index_data_block));

	//dbg(0, "index entries=%d\n", ret->si_ibs.count_of_index_blocks);
	//dbg(0, "index entry size=%d\n", sizeof(struct streets_index_index_block));
	s1 = sizeof(struct streets_index_index_block) * ret->si_ibs.count_of_index_blocks;
	//dbg(0, "s1=%ld\n", s1);

	ret->si_ib_mem = g_malloc(s1);
	ret->si_ib = ret->si_ib_mem;

	ret->comp_status = 0;
	ret->t_comp_status = 0;

	//dbg(0, "ftell=%d\n", ftell(ret->sif));
	fread(ret->si_ib_mem, sizeof(struct streets_index_index_block), ret->si_ibs.count_of_index_blocks, ret->sif);
	//dbg(0, "ftell=%d\n", ftell(ret->sif));

	//dbg(0, "len=%lld\n", ret->si_ib->len);
	//dbg(0, "offset=%lld\n", ret->si_ib->offset);

	fseek(ret->sif, street_index_size + sizeof(long long), SEEK_SET); // seek to townindex header
	fread(&ret->ti_ibs, sizeof(struct town_index_index_block_start), 1, ret->sif);
	//dbg(0, "len=%lld\n", ret->ti_ibs.count_of_index_blocks);

	//dbg(0, "town index entries=%d\n", ret->ti_ibs.count_of_index_blocks);
	//dbg(0, "town index entry size=%d\n", sizeof(struct town_index_index_block));
	s1 = sizeof(struct town_index_index_block) * ret->ti_ibs.count_of_index_blocks;
	//dbg(0, "s1=%ld\n", s1);

	ret->ti_ib_mem = g_malloc(s1);
	ret->ti_ib = ret->ti_ib_mem;

	//dbg(0, "ftell=%d\n", ftell(ret->sif));
	fread(ret->ti_ib_mem, sizeof(struct town_index_index_block), ret->ti_ibs.count_of_index_blocks, ret->sif);
	//dbg(0, "ftell=%d\n", ftell(ret->sif));

	//dbg(0, "town len=%lld\n", ret->ti_ib->len);
	//dbg(0, "town offset=%lld\n", ret->ti_ib->offset);

	return ret;
}

void town_index_setpos(struct street_index_head *sih, int town_data_block_num)
{
	//dbg(0,"+#+:enter\n");

	if (sih->t_comp_status == 1)
	{
		town_index_close_compr(sih);
	}

	sih->ti_ib = (sih->ti_ib_mem + town_data_block_num);

	town_index_init_compr(sih, sih->ti_ib->len);

	//dbg(0, "len=%lld\n", sih->ti_ib->len);
	//dbg(0, "fid=%lld\n", sih->ti_ib->first_id);
	//dbg(0, "off=%lld\n", sih->ti_ib->offset);

	// if (sih->ti_ib->len >= sizeof(struct town_index_data_block))
	if (sih->ti_ib->len > 1)
	{
		//dbg(0, "fpos1=%d\n", ftell(sih->sif));
		fseek(sih->sif, sih->ti_ib->offset + sizeof(long long) + street_index_size, SEEK_SET);
		//dbg(0, "fpos2=%d\n", ftell(sih->sif));

		sih->t_data_count = 0;
		// move ptr to first data
		sih->ti_db_ptr = t_s_outbuf;
	}

}

void street_index_setpos(struct street_index_head *sih, int data_block_num)
{
	//dbg(0,"+#+:enter\n");

	if (sih->comp_status == 1)
	{
		street_index_close_compr(sih);
	}

	sih->si_ib = (sih->si_ib_mem + data_block_num);

	//dbg(0, "len=%lld\n", sih->si_ib->len);
	//dbg(0, "fl=%c off=%lld\n", sih->si_ib->first_letter, sih->si_ib->offset);

	street_index_init_compr(sih, sih->si_ib->len);

	//if (sih->si_ib->len >= sizeof(struct streets_index_data_block))
	if (sih->si_ib->len > 1) // what is the minimum compressed block size? (about 55 bytes now)
	{
		//dbg(0, "mem start=%d, cur pos=%d\n", sih->si_ib_mem, sih->si_ib);
		//dbg(0, "file offset=%d\n", sih->si_ib->offset);
		//dbg(0, "fpos s1=%d\n", ftell(sih->sif));
		fseek(sih->sif, sih->si_ib->offset + sizeof(long long), SEEK_SET); // add the "long long" from start of file to offset
		//dbg(0, "fpos s2=%d\n", ftell(sih->sif));

		sih->data_count = 0;
		// move ptr to first data
		sih->si_db_ptr = s_outbuf;
	}
}

int street_index_read_data(struct street_index_head *sih)
{
	//dbg(0,"+#+:enter\n");

	// fread(&sih->si_db, sizeof(struct streets_index_data_block), 1, sih->sif);


	//if (sih->si_ib->len < sizeof(struct streets_index_data_block))
	if (sih->si_ib->len <= 1) // minimum size of compressed block?
	{
		//dbg(0, "len=%d sof=%d\n", sih->si_ib->len, sizeof(struct streets_index_data_block));
		// no data for this letter
		return 0;
	}

	if (sih->data_count == 0)
	{
		// init
		sih->next_out = s_outbuf;
		sih->avail_out = OUT_BUF_SIZE2;

		// read data
		sih->data_count = street_index_decompress_data_block(sih);
		//dbg(0, "stat=%d\n", sih->data_count);

		if (sih->data_count <= 0)
		{
			// end of data
			return 0;
		}

		// move ptr to next data
		sih->si_db_ptr = s_outbuf;
	}
	else
	{
		sih->data_count = sih->data_count - sizeof(struct streets_index_data_block);

		if (sih->data_count > 0)
		{
			sih->si_db_ptr++;
			//dbg(0, "dc=%d ptr=%p\n", sih->data_count, sih->si_db_ptr);
		}
		else
		{
			// init
			sih->next_out = s_outbuf;
			sih->avail_out = OUT_BUF_SIZE2;

			// read data
			sih->data_count = street_index_decompress_data_block(sih);
			//dbg(0, "stat2=%d\n", sih->data_count);

			if (sih->data_count <= 0)
			{
				// end of data
				return 0;
			}

			// move ptr to next data
			sih->si_db_ptr = s_outbuf;
		}
	}

	//dbg(0, "data=%s, %d, %d, %lld\n", sih->si_db_ptr->street_name, sih->si_db_ptr->lat, sih->si_db_ptr->lon, sih->si_db_ptr->town_id);

	return 1;

	//if (ftell(sih->sif) > (sih->si_ib->offset + sih->si_ib->len))
	//{
	//	// end of data
	//	return 0;
	//}

	// more data found
	// return 1;
}

int town_index_read_data(struct street_index_head *sih)
{
	//dbg(0,"+#+:enter\n");

	// fread(&sih->si_db, sizeof(struct streets_index_data_block), 1, sih->sif);


	// if (sih->ti_ib->len < sizeof(struct town_index_data_block))
	if (sih->ti_ib->len <= 1)
	{
		// no data for this block
		//fprintf(stderr, "no data for this block\n");
		return 0;
	}

	if (sih->t_data_count == 0)
	{
		// init
		sih->t_next_out = t_s_outbuf;
		sih->t_avail_out = t_OUT_BUF_SIZE2;

		// read data
		sih->t_data_count = town_index_decompress_data_block(sih);
		//dbg(0, "stat=%d\n", sih->data_count);

		if (sih->t_data_count <= 0)
		{
			// end of data
			//fprintf(stderr, "end of data\n");
			return 0;
		}

		// move ptr to next data
		sih->ti_db_ptr = t_s_outbuf;
	}
	else
	{
		sih->t_data_count = sih->t_data_count - sizeof(struct town_index_data_block);

		if (sih->t_data_count > 0)
		{
			sih->ti_db_ptr++;
			//dbg(0, "dc=%d ptr=%p\n", sih->data_count, sih->si_db_ptr);
		}
		else
		{
			// init
			sih->t_next_out = t_s_outbuf;
			sih->t_avail_out = t_OUT_BUF_SIZE2;

			// read data
			sih->t_data_count = town_index_decompress_data_block(sih);
			//dbg(0, "stat2=%d\n", sih->data_count);

			if (sih->t_data_count <= 0)
			{
				// end of data
				//fprintf(stderr, "end of data (2)\n");
				return 0;
			}

			// move ptr to next data
			sih->ti_db_ptr = t_s_outbuf;
		}
	}

	//dbg(0, "data=%s, %d, %d, %lld\n", sih->si_db_ptr->street_name, sih->si_db_ptr->lat, sih->si_db_ptr->lon, sih->si_db_ptr->town_id);

	return 1;

	//if (ftell(sih->sif) > (sih->si_ib->offset + sih->si_ib->len))
	//{
	//	// end of data
	//	return 0;
	//}

	// more data found
	// return 1;
}

void street_index_close_compr(struct street_index_head *sih)
{
	//dbg(0,"+#+:enter\n");

	g_free(sih->inflator);
	sih->comp_status = 2;

	//dbg(0,"+#+:leave\n");
}

void town_index_close_compr(struct street_index_head *sih)
{
	//dbg(0,"+#+:enter\n");

	g_free(sih->t_inflator);
	sih->t_comp_status = 2;

	//dbg(0,"+#+:leave\n");
}

void street_index_init_compr(struct street_index_head *sih, long long size)
{
	//dbg(0,"+#+:enter\n");

	// decompress structure
	sih->inflator = g_new0(tinfl_decompressor, 1);
	sih->comp_status = 1;
	// decompress structure

	// Decompression.
	sih->infile_size = (uint) size;
	sih->infile_remaining = sih->infile_size;

	sih->next_in = s_inbuf;
	sih->avail_in = 0;
	sih->next_out = s_outbuf;
	sih->avail_out = OUT_BUF_SIZE2;

	sih->data_count = 0;

	tinfl_init(sih->inflator);

	//dbg(0,"+#+:leave\n");
}

void town_index_init_compr(struct street_index_head *sih, long long size)
{
	//dbg(0,"+#+:enter\n");

	// decompress structure
	sih->t_inflator = g_new0(tinfl_decompressor, 1);
	sih->t_comp_status = 1;
	// decompress structure

	// Decompression.
	sih->t_infile_size = (uint) size;
	sih->t_infile_remaining = sih->t_infile_size;

	sih->t_next_in = t_s_inbuf;
	sih->t_avail_in = 0;
	sih->t_next_out = t_s_outbuf;
	sih->t_avail_out = t_OUT_BUF_SIZE2;

	sih->t_data_count = 0;

	tinfl_init(sih->t_inflator);

	//dbg(0,"+#+:leave\n");
}

int street_index_decompress_data_block(struct street_index_head *sih)
{
	//dbg(0,"+#+:enter\n");

	// size_t total_in = 0, total_out = 0;
	// long file_loc;

	// Decompression.
	for (;;)
	{
		sih->in_bytes = 0;
		sih->out_bytes = 0;
		if (!sih->avail_in)
		{
			// Input buffer is empty, so read more bytes from input file.
			uint n = my_min(IN_BUF_SIZE2, sih->infile_remaining);

			//dbg(0, "reading bytes:%d remain=%d\n", n, sih->infile_remaining);

			if (fread(s_inbuf, 1, n, sih->sif) != n)
			{
				//printf("Failed reading from input file!\n");
				dbg(0, "Failed reading from input file!\n");
				//g_free(sih->inflator);
				return -1;
			}

			sih->next_in = s_inbuf;
			sih->avail_in = n;

			sih->infile_remaining -= n;
		}

		sih->in_bytes = sih->avail_in;
		sih->out_bytes = sih->avail_out;
		sih->miniz_status = tinfl_decompress(sih->inflator, (const mz_uint8 *) sih->next_in, &sih->in_bytes, s_outbuf, (mz_uint8 *) sih->next_out, &sih->out_bytes, (sih->infile_remaining ? TINFL_FLAG_HAS_MORE_INPUT : 0) | TINFL_FLAG_PARSE_ZLIB_HEADER);

		sih->avail_in -= sih->in_bytes;
		sih->next_in = (const mz_uint8 *) sih->next_in + sih->in_bytes;
		//total_in += sih->in_bytes;

		sih->avail_out -= sih->out_bytes;
		sih->next_out = (mz_uint8 *) sih->next_out + sih->out_bytes;
		//total_out += sih->out_bytes;

		if ((sih->miniz_status <= TINFL_STATUS_DONE) || (!sih->avail_out))
		{
			// Output buffer is full, or decompression is done, so write buffer to output file.
			uint n = OUT_BUF_SIZE2 - (uint) sih->avail_out;

			//dbg(0, "decompr: start=%p len=%d\n", (void *) sih->next_out, (int) n);
			//dbg(0, "decompr: start=%p len=%d\n", (void *) s_outbuf, (int) n);
			//dbg(0, "decompr: av in=%d av out=%d\n", sih->avail_in, sih->avail_out);
			//dbg(0, "decompr: nx in=%d nx out=%d\n", sih->next_in, sih->next_out);

			//struct streets_index_data_block *tmp = (struct streets_index_data_block *)s_outbuf;
			//dbg(0,"data=%s, %d, %d, %lld\n", tmp->street_name, tmp->lat, tmp->lon, tmp->town_id);

			//sih->next_out = s_outbuf;
			//sih->avail_out = OUT_BUF_SIZE2;

			return (int) n;

			//if (fwrite(s_outbuf, 1, n, pOutfile) != n)
			//{
			//  // printf("Failed writing to output file!\n");
			//	//g_free(inflator);
			//  return;
			//}
		}

		// If sih->miniz_status is <= TINFL_STATUS_DONE then either decompression is done or something went wrong.
		if (sih->miniz_status <= TINFL_STATUS_DONE)
		{
			if (sih->miniz_status == TINFL_STATUS_DONE)
			{
				// Decompression completed successfully.
				//dbg(0, "Decompression completed successfully\n");
				//break;
				return -2;
			}
			else
			{
				// Decompression failed.
				//printf("tinfl_decompress() failed with status %i!\n", sih->miniz_status);
				dbg(0, "tinfl_decompress() failed with status %i!\n", sih->miniz_status);

				//g_free(inflator);
				return -1;
			}
		}
	}

	//g_free(inflator);
	return -3;

}



int town_index_decompress_data_block(struct street_index_head *sih)
{
	//dbg(0,"+#+:enter\n");

	// size_t total_in = 0, total_out = 0;
	// long file_loc;

	// Decompression.
	for (;;)
	{
		sih->t_in_bytes = 0;
		sih->t_out_bytes = 0;
		if (!sih->t_avail_in)
		{
			// Input buffer is empty, so read more bytes from input file.
			uint n = my_min(t_IN_BUF_SIZE2, sih->t_infile_remaining);

			//dbg(0, "reading bytes:%d remain=%d\n", n, sih->t_infile_remaining);

			if (fread(t_s_inbuf, 1, n, sih->sif) != n)
			{
				//printf("Failed reading from input file!\n");
				dbg(0, "Failed reading from input file!\n");
				//g_free(sih->inflator);
				return -1;
			}

			sih->t_next_in = t_s_inbuf;
			sih->t_avail_in = n;

			sih->t_infile_remaining -= n;
		}

		sih->t_in_bytes = sih->t_avail_in;
		sih->t_out_bytes = sih->t_avail_out;
		sih->t_miniz_status = tinfl_decompress(sih->t_inflator, (const mz_uint8 *) sih->t_next_in, &sih->t_in_bytes, t_s_outbuf, (mz_uint8 *) sih->t_next_out, &sih->t_out_bytes, (sih->t_infile_remaining ? TINFL_FLAG_HAS_MORE_INPUT : 0) | TINFL_FLAG_PARSE_ZLIB_HEADER);

		sih->t_avail_in -= sih->t_in_bytes;
		sih->t_next_in = (const mz_uint8 *) sih->t_next_in + sih->t_in_bytes;
		//total_in += sih->in_bytes;

		sih->t_avail_out -= sih->t_out_bytes;
		sih->t_next_out = (mz_uint8 *) sih->t_next_out + sih->t_out_bytes;
		//total_out += sih->out_bytes;

		if ((sih->t_miniz_status <= TINFL_STATUS_DONE) || (!sih->t_avail_out))
		{
			// Output buffer is full, or decompression is done, so write buffer to output file.
			uint n = t_OUT_BUF_SIZE2 - (uint) sih->t_avail_out;

			//dbg(0, "decompr: start=%p len=%d\n", (void *) sih->next_out, (int) n);
			//dbg(0, "decompr: start=%p len=%d\n", (void *) s_outbuf, (int) n);
			//dbg(0, "decompr: av in=%d av out=%d\n", sih->avail_in, sih->avail_out);
			//dbg(0, "decompr: nx in=%d nx out=%d\n", sih->next_in, sih->next_out);

			//struct town_index_data_block *tmpt = (struct town_index_data_block *)t_s_outbuf;
			//dbg(0,"data=%lld %s\n", tmpt->town_id, tmpt->town_name);

			//sih->next_out = s_outbuf;
			//sih->avail_out = t_OUT_BUF_SIZE2;

			return (int) n;

			//if (fwrite(s_outbuf, 1, n, pOutfile) != n)
			//{
			//  // printf("Failed writing to output file!\n");
			//	//g_free(inflator);
			//  return;
			//}
		}

		// If sih->miniz_status is <= TINFL_STATUS_DONE then either decompression is done or something went wrong.
		if (sih->t_miniz_status <= TINFL_STATUS_DONE)
		{
			if (sih->t_miniz_status == TINFL_STATUS_DONE)
			{
				// Decompression completed successfully.
				//dbg(0, "Decompression completed successfully\n");
				//break;
				return -2;
			}
			else
			{
				// Decompression failed.
				//printf("tinfl_decompress() failed with status %i!\n", sih->miniz_status);
				dbg(0, "tinfl_decompress() failed with status %i!\n", sih->t_miniz_status);

				//g_free(inflator);
				return -1;
			}
		}
	}

	//g_free(inflator);
	return -3;

}

void street_index_close(struct street_index_head *sih)
{
	//dbg(0,"+#+:enter\n");

	g_free(sih->si_ib_mem);
	g_free(sih->ti_ib_mem);
	if (town_lookup_cache)
	{
		g_free(town_lookup_cache);
		town_lookup_cache = NULL;
	}
	fclose(sih->sif);
	g_free(sih);

	//dbg(0,"+#+:leave\n");
}



#include <sys/types.h>
#include <dirent.h>

void spill_index()
{
}

void search_v2(const char *addr, const char *town, const char* hn, int partial, struct jni_object *jni)
{
	//dbg(0,"+#+:enter\n");

	int len;
	int len2;
	int len3;
	char *last_four;
	DIR* dirp;
	struct dirent *dp;
	int result_count = 0;
	int this_res_count = 0;
	void *p1;
	void *p2;
	void *p3;
	void *p4;

	s_outbuf = g_malloc(OUT_BUF_SIZE2);
	t_s_outbuf = g_malloc(t_OUT_BUF_SIZE2);
	p1 = s_outbuf;
	p2 = t_s_outbuf;

	s_inbuf = g_malloc(IN_BUF_SIZE2);
	t_s_inbuf = g_malloc(t_IN_BUF_SIZE2);
	p3 = s_inbuf;
	p4 = t_s_inbuf;


	len2 = strlen("navitmap_");
	len = len2 + 11; // should be 21 'navitmap_0%%.bin.idx'

	if ((town == NULL) || (strlen(town) == 0))
	{
		result_count = 0;
		this_res_count = 0;

		// ------------- SEARCH LOOP -------------
		// look for all the navitmap_0**.bin.idx files in mapdir, then call search in all of them
		// we dont have a TOWN name, so just search for "addr"
		dirp = opendir(navit_maps_dir);
		while ((dp = readdir(dirp)) != NULL)
		{
			if ((strlen(dp->d_name) == len) && (!strncmp(dp->d_name, "navitmap_", len2)))
			{
				len3 = strlen(dp->d_name);
				last_four = &dp->d_name[len3 - 4];
				if (!strcmp(last_four, ".idx"))
				{
					this_res_count = search_v2_work(addr, NULL, hn, partial, jni, dp->d_name);
					//dbg(0, "SLOOP:s=%s t=%s c=%i\n", addr, NULL, this_res_count);
					result_count = result_count + this_res_count;
				}
			}
		}
		closedir(dirp);
		//dbg(0, "SLOOP:sumc=%i\n", result_count)
		// ------------- SEARCH LOOP -------------
	}
	else
	{
		result_count = 0;
		this_res_count = 0;

		// ------------- SEARCH LOOP 1 -------------
		// look for all the navitmap_0**.bin.idx files in mapdir, then call search in all of them
		// first search for "addr<space>town" concated as street name
		char *addr_concat = g_strdup_printf("%s %s", addr, town);
		dirp = opendir(navit_maps_dir);
		while ((dp = readdir(dirp)) != NULL)
		{
			if ((strlen(dp->d_name) == len) && (!strncmp(dp->d_name, "navitmap_", len2)))
			{
				len3 = strlen(dp->d_name);
				last_four = &dp->d_name[len3 - 4];
				if (!strcmp(last_four, ".idx"))
				{
					this_res_count = search_v2_work(addr_concat, NULL, hn, partial, jni, dp->d_name);
					//dbg(0, "SLOOP1:s=%s t=%s c=%i\n", addr_concat, NULL, this_res_count);
					result_count = result_count + this_res_count;
				}
			}
		}
		closedir(dirp);
		//dbg(0, "SLOOP1:sumc=%i\n", result_count)
		g_free(addr_concat);
		// ------------- SEARCH LOOP 1 -------------

		// ------------- SEARCH LOOP 2 -------------
		// look for all the navitmap_0**.bin.idx files in mapdir, then call search in all of them
		// then search for "addr" and "town"
		dirp = opendir(navit_maps_dir);
		while ((dp = readdir(dirp)) != NULL)
		{
			if ((strlen(dp->d_name) == len) && (!strncmp(dp->d_name, "navitmap_", len2)))
			{
				len3 = strlen(dp->d_name);
				last_four = &dp->d_name[len3 - 4];
				if (!strcmp(last_four, ".idx"))
				{
					this_res_count = search_v2_work(addr, town, hn, partial, jni, dp->d_name);
					//dbg(0, "SLOOP2:s=%s t=%s c=%i\n", addr, town, this_res_count);
					result_count = result_count + this_res_count;
				}
			}
		}
		closedir(dirp);
		//dbg(0, "SLOOP2:sumc=%i\n", result_count)
		// ------------- SEARCH LOOP 2 -------------

		// if still no result then search only for "addr" as streetname
		if (result_count == 0)
		{
			// ------------- SEARCH LOOP 3 -------------
			// look for all the navitmap_0**.bin.idx files in mapdir, then call search in all of them
			dirp = opendir(navit_maps_dir);
			while ((dp = readdir(dirp)) != NULL)
			{
				if ((strlen(dp->d_name) == len) && (!strncmp(dp->d_name, "navitmap_", len2)))
				{
					len3 = strlen(dp->d_name);
					last_four = &dp->d_name[len3 - 4];
					if (!strcmp(last_four, ".idx"))
					{
						this_res_count = search_v2_work(addr, NULL, hn, partial, jni, dp->d_name);
						//dbg(0, "SLOOP3:s=%s t=%s c=%i\n", addr, NULL, this_res_count);
						result_count = result_count + this_res_count;
					}
				}
			}
			closedir(dirp);
			//dbg(0, "SLOOP3:sumc=%i\n", result_count)
			// ------------- SEARCH LOOP 3 -------------
		}

	}

	g_free(p1);
	g_free(p2);

	g_free(p3);
	g_free(p4);

	//dbg(0,"+#+:leave\n");
}

int search_v2_work(const char *addr, const char *town, const char* hn, int partial, struct jni_object *jni, const char* idxfile_name)
{
	//dbg(0,"+#+:enter\n");

	char *buffer = NULL;
	float lat;
	float lng;
	char *address;
	char *address2;
	char *townname = NULL;
	char *addr_copy;
	char *addr2;
	char *addr3;
	char *addr3a;
	char *town_fold;
	char *tt;
	int i;
	int j;
	int br;
	int charlen;
	int found;
	int starts_with_utf8 = 0;
	int nd_with_utf8 = 0;
	int want_result;
	struct coord c3;
	static const char *alpha = "abcdefghijklmnopqrstuvwxyz";
	// char tmp_letter[STREET_INDEX_STREET_NAME_SIZE - 1];
	struct street_index_head *sih;
	int res_hn = 0;
	int search_results_found_ = 0;
	long long pos_now_pre;
	long long pos_now_aft;
	int max_townname_plus_1 = MAX_INDEXSEARCH_TOWNNAME + 1;


	if ((!addr) || (strlen(addr) < 1))
	{
		return NULL;
	}

	// prepare search string
	addr2 = linguistics_casefold(addr);
	if (addr2)
	{
		addr3 = linguistics_remove_all_specials(addr2);
		if (addr3)
		{
			g_free(addr2);
			addr2 = addr3;
		}
		addr3 = linguistics_expand_special(addr2, 1);
		if (addr3)
		{
			g_free(addr2);
			addr2 = addr3;
		}
		addr_copy = addr2;
	}
	else
	{
		addr2 = g_strdup(addr);
		addr_copy = addr2;
	}

	// prepare town search string
	town_fold = linguistics_fold_and_prepare_complete(town, 0);


	//dbg(0,"town=%s townfold=%s street=%s hn=%s\n", town, town_fold, addr_copy, hn);

	sih = street_index_init(idxfile_name);

	// is first letter ascii or UTF-8?
	addr3 = g_utf8_find_next_char(addr_copy, NULL);
	charlen = addr3 - addr_copy;
	if (charlen > 1)
	{
		starts_with_utf8 = 1;
	}
	//dbg(0, "charlen=%d starts_with_utf8=%d\n", charlen, starts_with_utf8);

	// is second letter ascii or UTF-8?
	addr3a = g_utf8_find_next_char(addr3, NULL);
	charlen = addr3a - addr3;
	if (charlen > 1)
	{
		nd_with_utf8 = 1;
	}
	//dbg(0, "charlen=%d nd_with_utf8=%d\n", charlen, nd_with_utf8);


	// find starting letter of search string
	found = (703 - 1); // 26+1 letters ((26+1)*26 + 1) = 703
	br = 0;
	if (starts_with_utf8 == 0)
	{
		// check the first letter
		for (i = 0; i < 26; i++)
		{
			if (addr_copy[0] == alpha[i])
			{
				if ((strlen(addr_copy) > 1) && (nd_with_utf8 == 0))
				{
					//dbg(0, "i=%d\n", i);
					// check the second letter
					for (j = 0; j < 26; j++)
					{
						//dbg(0, "j=%d\n", j);
						if (addr_copy[1] == alpha[j])
						{
							found = (27 * i) + j;
							br = 1;
							break;
						}
					}
					if (br == 0)
					{
						// second letter has no match, use generic first letter block
						found = (27 * i) + 26;
					}
					br = 1;
					break;
				}
				else
				{
					// use generic first letter block
					found = (27 * i) + 26;
					br = 1;
					break;
				}
			}

			if (br)
			{
				break;
			}
		}
	}

	// dbg(0, "found pos=%d\n", found);

	street_index_setpos(sih, found);
	int found_data = 0;
	//int ddd = 0;

	while (street_index_read_data(sih))
	{
		// ------------------------------------------
		// ------------------------------------------
		// what streettypes do we want to include in search:
		// 1  -> normal street in native language
		// 2  -> english streetname
		// 3  -> alternative name
		// 4  -> town name
		// 40 -> POI
		// ------------------------------------------
		// ------------------------------------------
		//
		// dbg(0,"STREETINDEX:type=%d name=%s\n", (int)sih->si_db_ptr->street_type, sih->si_db_ptr->street_name);
#if 0
		if ((int)sih->si_db_ptr->street_type == 2)
		{
			continue;
		}

		if ((int)sih->si_db_ptr->street_type == 3)
		{
			continue;
		}
#endif
		//
		// ------------------------------------------
		// ------------------------------------------

		//ddd++;

		//if (ddd > 3)
		//{
		//	break;
		//}

		if (offline_search_break_searching == 1)
		{
			break;
		}


		// -- SANITY CHECK -- ----------------------
		if (! sih->si_db_ptr->street_name)
		{
			// the end is here
			break;
		}

		if (strlen(sih->si_db_ptr->street_name) == 0)
		{
			// the end is here
			break;
		}
		// -- SANITY CHECK -- ----------------------


		//dbg(0,"data=%s addr=%s\n", sih->si_db_ptr->street_name, addr_copy);
		if (!ascii_cmp_local_faster(sih->si_db_ptr->street_name, addr_copy, 1))
		{
			found_data = 1;
			if ((partial == 1) || (!ascii_cmp_local_faster(sih->si_db_ptr->street_name, addr_copy, partial)))
			{
				// dbg(0, "TWNAME:00:t_id=%d\n", (int)sih->si_db_ptr->town_id);

				// townname = NULL;
				pos_now_pre = ftello(sih->sif); // 64bit
				townname = town_index_lookup(sih, sih->si_db_ptr->town_id);
				pos_now_aft = ftello(sih->sif); // 64bit
				if (pos_now_pre != pos_now_aft)
				{
					// dbg(0, "correct seek position\n");
					fseeko(sih->sif, (off_t)pos_now_pre, SEEK_SET);
				}

				// if we also have a search-town-name then check here
				if ((!town_fold)||(strlen(town_fold) < 1))
				{
					want_result = 1;
				}
				else
				{
					tt = linguistics_fold_and_prepare_complete(townname, 0);
					want_result = 1-(linguistics_compare_anywhere(tt, town_fold));
					//dbg(0, "want_result=%d tt=%s\n", want_result, tt);
				}

				if (want_result == 1)
				{

					// check for housenumber
					if ((hn != NULL) && (strlen(hn) > 0))
					{
						// now set coord of this item/street
						c3.y = sih->si_db_ptr->lat;
						c3.x = sih->si_db_ptr->lon;
						res_hn = search_address_housenumber_for_street(hn, sih->si_db_ptr->street_name, townname, &c3, partial, jni);
						search_results_found_ = search_results_found_ + res_hn;
					}

					// dbg(0, "TWNAME:00:t=%p\n", townname);

					if ((townname)&&(strcmp(townname, "(null)")))
					{
						address = g_strdup_printf("%s, %s", sih->si_db_ptr->street_name, townname);

						// dbg(0, "TWNAME:01:t=%s\n", townname);
					}
					else
					{
						address = g_strdup_printf("%s", sih->si_db_ptr->street_name);
					}

					if (strlen(address) > MAX_INDEXSEARCH_TOWNNAME)
					{
						address2 = address;
						address2[max_townname_plus_1] = '\0';
						address2 = linguistics_check_utf8_string(address2);
					}
					else
					{
						address2 = address;
					}

					if ((int)sih->si_db_ptr->street_type == 4)
					{
						// result is town/district
						buffer = g_strdup_printf("TWN:H0L0:%d:%d:%.*s", sih->si_db_ptr->lat, sih->si_db_ptr->lon, max_townname_plus_1, address2);
					}
					else if ((int)sih->si_db_ptr->street_type == 40)
					{
						// result is town/district
						buffer = g_strdup_printf("POI:H0L0:%d:%d:%.*s", sih->si_db_ptr->lat, sih->si_db_ptr->lon, max_townname_plus_1, address2);
					}
					else
					{
						// result is street
						buffer = g_strdup_printf("STR:H0L0:%d:%d:%.*s", sih->si_db_ptr->lat, sih->si_db_ptr->lon, max_townname_plus_1, address2);
					}
					// dbg(0,"buffer=%s\n", buffer);
#ifdef HAVE_API_ANDROID
					// return results to android as they come in ...
					android_return_search_result(jni, buffer);
					search_results_found_++;
#endif
					if (townname)
					{
						g_free(townname);
						townname = NULL;
					}

					if (address)
					{
						g_free(address);
						address = NULL;
					}

					if (buffer)
					{
						g_free(buffer);
						buffer = NULL;
					}
				}
			}
		}
		else
		{
			if (found_data == 1)
			{
				// no more matching data, stop searching
				break;
			}
		}
	}
	g_free(addr_copy);
	street_index_close(sih);

	//dbg(0,"+#+:leave\n");

	return search_results_found_;
}


